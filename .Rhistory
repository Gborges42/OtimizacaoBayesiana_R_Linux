require(ParBayesianOptimization)
# Carregando funcoes de inicializacao
source(".//src//loader.R")
setwd("//wsl.localhost/Ubuntu/home/glauber/calibration-dssat-main")
# Carregando funcoes de inicializacao
source(".//src//loader.R")
# Carregando pacotes
load.packages()
# Compilando funcoes
compile.functions()
# Carregando funcoes compiladas
load.functions()
# Arquivo de Configuração
# ATENÇÃO!!! Ao mudar o arquivo de configurção, será necessário mudar também dentro da função
arq.config = ".//StartValues_bean.config"
# Lendo o arquivo de configuração para adquirir o input
input = config.treatment(arq.config)
teste = c(EMFL = 18.57, FLSH = 4.24, FLSD = 6.56, SDPM = 16.555, FLLF = 8.4185)
paramSim = c(EMFL = 18.57, FLSH = 4.24, FLSD = 6.56, SDPM = 16.555, FLLF = 8.4185)
message(sprintf("Rodando Simulação para os valores %s", str(paramSim)))
message(sprintf("Rodando Simulação para os valores %s", summary(paramSim)))
message(sprintf("Rodando Simulação para os valores %s", summary(paramSim)))
message(sprintf("Rodando Simulação para os valores %s, %s, %s, %s", summary(paramSim)))
message(sprintf("Rodando Simulação para os valores %s, %s, %s, %s", paramSim))
message(sprintf("Rodando Simulação para os valores %s, %s, %s, %s, %s", paramSim))
message(sprintf("Rodando Simulação para os valores %s, %s, %s, %s, %s", paramSim))
paramSim
message(sprintf("Rodando Simulação para os valores %n, %n, %n, %n, %n", paramSim))
message(sprintf("Rodando Simulação para os valores %f, %f, %f, %f, %f", paramSim))
message(sprintf("Rodando Simulação para os valores %f, %f, %f, %f, %f", paramSim))
paramSim
str(paramSim, max.level=1)
for(valor in paramSim){
print(valor)
}
mensagem = ("Rodando Simulação para os valores:")
for(valor in paramSim){
mensagem = paste(mensagem, valor, sep = " ")
}
# Carregando funcoes de inicializacao
source(".//src//loader.R")
# Carregando pacotes
load.packages()
# Compilando funcoes
compile.functions()
# Carregando funcoes compiladas
load.functions()
cargos = fread("candidatos embrapa.txt")
View(cargos)
arquivo = "candidatos embrapa.txt"
library(data.table)
# Função para ler e organizar os dados do arquivo txt
processar_dados <- function(caminho_arquivo) {
# Lê todas as linhas do arquivo
linhas <- readLines(caminho_arquivo, warn = FALSE)
# Junta as linhas em uma única string, tratando quebras de página
texto_completo <- paste(linhas, collapse = "")
# Remove espaços em branco extras e caracteres de controle como \f (form feed, usado em quebras de página)
texto_completo <- gsub("\\s+", " ", texto_completo)
texto_completo <- gsub("\f", "", texto_completo)
# Separa os candidatos pelo símbolo "/"
candidatos_brutos <- unlist(strsplit(texto_completo, "/"))
# Inicializa a data.table
dados <- data.table(ID = character(), Nome = character(), Nota1 = numeric(),
Nota2 = numeric(), Nota3 = numeric(), Nota4 = numeric(),
Nota5 = numeric(), Nota6 = numeric(), Nota7 = numeric())
for (candidato in candidatos_brutos) {
# Remove espaços antes e depois
candidato <- trimws(candidato)
# Separa os campos por vírgula
partes <- unlist(strsplit(candidato, ","))
# Garante que haja exatamente 9 partes: id, nome, 7 notas
if (length(partes) == 9) {
id <- trimws(partes[1])
nome <- trimws(partes[2])
notas <- as.numeric(trimws(partes[3:9]))
# Adiciona à tabela
dados <- rbind(dados, data.table(ID = id, Nome = nome,
Nota1 = notas[1], Nota2 = notas[2], Nota3 = notas[3],
Nota4 = notas[4], Nota5 = notas[5], Nota6 = notas[6],
Nota7 = notas[7]))
}
}
return(dados)
}
candidatos = processar_dados(arquivo)
View(candidatos)
arquivo = "candidatos embrapa.txt"
library(data.table)
# Função para ler e organizar os dados do arquivo txt
processar_dados <- function(caminho_arquivo) {
# Lê todas as linhas do arquivo
linhas <- readLines(caminho_arquivo, warn = FALSE)
# Junta as linhas em uma única string, tratando quebras de página
texto_completo <- paste(linhas, collapse = "")
# Remove espaços em branco extras e caracteres de controle como \f (form feed, usado em quebras de página)
texto_completo <- gsub("\\s+", " ", texto_completo)
texto_completo <- gsub("\f", "", texto_completo)
# Separa os candidatos pelo símbolo "/"
candidatos_brutos <- unlist(strsplit(texto_completo, "/"))
# Inicializa a data.table
dados <- data.table(ID = character(), Nome = character(), Nota1 = numeric(),
Nota2 = numeric(), Nota3 = numeric(), Nota4 = numeric(),
Nota5 = numeric(), Nota6 = numeric(), Nota7 = numeric())
for (candidato in candidatos_brutos) {
# Remove espaços antes e depois
candidato <- trimws(candidato)
# Separa os campos por vírgula
partes <- unlist(strsplit(candidato, ","))
# Garante que haja exatamente 9 partes: id, nome, 7 notas
if (length(partes) == 9) {
id <- trimws(partes[1])
nome <- trimws(partes[2])
notas <- as.numeric(trimws(partes[3:9]))
# Adiciona à tabela
dados <- rbind(dados, data.table(ID = id, Nome = nome,
Nota1 = notas[1], Nota2 = notas[2], Nota3 = notas[3],
Nota4 = notas[4], Nota5 = notas[5], Nota6 = notas[6],
Nota7 = notas[7]))
}
}
return(dados)
}
candidatos = processar_dados(arquivo)
View(candidatos)
candidatos_ord = candidatos[order(-Nota7)]
View(candidatos_ord)
# Carregando funcoes de inicializacao
source(".//src//loader.R")
# Carregando pacotes
load.packages()
# Compilando funcoes
compile.functions()
# Carregando funcoes compiladas
load.functions()
fwrite(candidatos_ord, "Cadnidatos_embrapa_ordem.csv")
environment(customBayesOpt) <- asNamespace('ParBayesianOptimization')
assignInNamespace("bayesOpt", customBayesOpt, ns = "ParBayesianOptimization")
bayesOpt <- customBayesOpt
#===============================================#
# Versão customizada da otimização bayesiana
customBayesOpt <- function (FUN, bounds, saveFile = NULL, initGrid, initPoints = 4,
iters.n = 3, iters.k = 1, otherHalting = list(timeLimit = Inf,
minUtility = 0), acq = "ucb", kappa = 2.576, eps = 0,
parallel = FALSE, gsPoints = pmax(100, length(bounds)^3),
convThresh = 1e+08, acqThresh = 1, errorHandling = "stop",
plotProgress = FALSE, verbose = 1, ...)
{
startT <- Sys.time()
optObj <- list()
class(optObj) <- "bayesOpt"
optObj$FUN <- FUN
optObj$bounds <- bounds
optObj$iters <- 0
optObj$initPars <- list()
optObj$optPars <- list()
optObj$GauProList <- list()
optObj <- changeSaveFile(optObj, saveFile)
checkParameters(bounds, iters.n, iters.k, otherHalting,
acq, acqThresh, errorHandling, plotProgress, parallel,
verbose)
boundsDT <- boundsToDT(bounds)
otherHalting <- formatOtherHalting(otherHalting)
if (missing(initGrid) + missing(initPoints) != 1)
stop("Please provide 1 of initGrid or initPoints, but not both.")
if (!missing(initGrid)) {
setDT(initGrid)
inBounds <- checkBounds(initGrid, bounds)
inBounds <- as.logical(apply(inBounds, 1, prod))
if (any(!inBounds))
stop("initGrid not within bounds.")
optObj$initPars$initialSample <- "User Provided Grid"
initPoints <- nrow(initGrid)
}
else {
initGrid <- randParams(boundsDT, initPoints)
optObj$initPars$initialSample <- "Latin Hypercube Sampling"
}
optObj$initPars$initGrid <- initGrid
if (nrow(initGrid) <= 2)
stop("Cannot initialize with less than 3 samples.")
optObj$initPars$initPoints <- nrow(initGrid)
if (initPoints <= length(bounds))
stop("initPoints must be greater than the number of FUN inputs.")
sinkFile <- file()
on.exit({
while (sink.number() > 0) sink()
close(sinkFile)
})
`%op%` <- ParMethod(parallel)
if (parallel)
Workers <- getDoParWorkers()
else Workers <- 1
if (verbose > 0)
cat("\nRunning initial scoring function", nrow(initGrid),
"times in", Workers, "thread(s)...")
sink(file = sinkFile)
tm <- system.time(scoreSummary <- foreach(iter = 1:nrow(initGrid),
.options.multicore = list(preschedule = FALSE), .combine = list,
.multicombine = TRUE, .maxcombine = nrow(initGrid), .inorder = FALSE, .errorhandling = "pass",
.verbose = FALSE) %op% {
Params <- initGrid[get("iter"), ]
Elapsed <- system.time(Result <- tryCatch({
do.call(what = FUN, args = as.list(Params))
}, error = function(e) e))
if (any(class(Result) %in% c("simpleError", "error",
"condition")))
return(Result)
if (!inherits(x = Result, what = "list"))
stop("Object returned from FUN was not a list.")
resLengths <- lengths(Result)
if (!any(names(Result) == "Score"))
stop("FUN must return list with element 'Score' at a minimum.")
if (!is.numeric(Result$Score))
stop("Score returned from FUN was not numeric.")
if (any(resLengths != 1)) {
badReturns <- names(Result)[which(resLengths !=
1)]
stop("FUN returned these elements with length > 1: ",
paste(badReturns, collapse = ","))
}
data.table(Params, Elapsed = Elapsed[[3]], as.data.table(Result))
})[[3]]
while (sink.number() > 0) sink()
if (verbose > 0)
cat(" ", tm, "seconds\n")
se <- which(sapply(scoreSummary, function(cl) any(class(cl) %in%
c("simpleError", "error", "condition"))))
if (length(se) > 0) {
print(data.table(initGrid[se, ], errorMessage = sapply(scoreSummary[se],
function(x) x$message)))
stop("Errors encountered in initialization are listed above.")
}
else {
scoreSummary <- rbindlist(scoreSummary)
}
scoreSummary[, `:=`(("gpUtility"), rep(as.numeric(NA), nrow(scoreSummary)))]
scoreSummary[, `:=`(("acqOptimum"), rep(FALSE, nrow(scoreSummary)))]
scoreSummary[, `:=`(("Epoch"), rep(0, nrow(scoreSummary)))]
scoreSummary[, `:=`(("Iteration"), 1:nrow(scoreSummary))]
scoreSummary[, `:=`(("inBounds"), rep(TRUE, nrow(scoreSummary)))]
scoreSummary[, `:=`(("errorMessage"), rep(NA, nrow(scoreSummary)))]
extraRet <- setdiff(names(scoreSummary), c("Epoch", "Iteration",
boundsDT$N, "inBounds", "Elapsed", "Score", "gpUtility",
"acqOptimum"))
setcolorder(scoreSummary, c("Epoch", "Iteration", boundsDT$N,
"gpUtility", "acqOptimum", "inBounds", "Elapsed", "Score",
extraRet))
if (any(scoreSummary$Elapsed < 1) & acq == "eips") {
cat("\n   FUN elapsed time is too low to be precise. Switching acq to 'ei'.\n")
acq <- "ei"
}
optObj$optPars$acq <- acq
optObj$optPars$kappa <- kappa
optObj$optPars$eps <- eps
optObj$optPars$parallel <- parallel
optObj$optPars$gsPoints <- gsPoints
optObj$optPars$convThresh <- convThresh
optObj$optPars$acqThresh <- acqThresh
optObj$scoreSummary <- scoreSummary
optObj$GauProList$gpUpToDate <- FALSE
optObj$iters <- nrow(scoreSummary)
optObj$stopStatus <- "OK"
optObj$elapsedTime <- as.numeric(difftime(Sys.time(), startT,
units = "secs"))
saveSoFar(optObj, 0)
optObj <- addIterations(optObj, otherHalting = otherHalting,
iters.n = iters.n, iters.k = iters.k, parallel = parallel,
plotProgress = plotProgress, errorHandling = errorHandling,
saveFile = saveFile, verbose = verbose, ...)
return(optObj)
}
environment(customBayesOpt) <- asNamespace('ParBayesianOptimization')
assignInNamespace("bayesOpt", customBayesOpt, ns = "ParBayesianOptimization")
bayesOpt <- customBayesOpt
View(bayesOpt)
rnorm(0,0.000001)
RMSE
rnorm(1,0,0.0001)
?bayesOpt
?bayesOpt
# Calibração DSSAT com Bayesiana
# Calibração DSSAT com Bayesiana
